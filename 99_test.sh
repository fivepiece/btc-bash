#!/bin/bash

testhmac() {

	local -u key data

	key="0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B"
	read data < <( echo -n "Hi There" | str2bytes | bytes2hexstr )
#	data="4869205468657265"
	hmac "${key}" "${data}"

	read key < <( echo -n "Jefe" | str2bytes | bytes2hexstr )
#	key="4A656665"
	read data < <( echo -n "what do ya want for nothing?" | str2bytes | bytes2hexstr )
#	data="7768617420646F2079612077616E7420666F72206E6F7468696E673F"	
	hmac "${key}" "${data}"

	key="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
	data="DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD"
	hmac "${key}" "${data}"

	key="0102030405060708090A0B0C0D0E0F10111213141516171819"
	data="CDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCDCD"
	hmac "${key}" "${data}"

	key="0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C"
	read data < <( echo -n "Test With Truncation" | str2bytes | bytes2hexstr )
#	data="546573742057697468205472756E636174696F6E"
	hmac "${key}" "${data}"

	key="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
	read data < <( echo -n "Test Using Larger Than Block-Size Key - Hash Key First" | str2bytes | bytes2hexstr )
#	data="54657374205573696E67204C6172676572205468616E20426C6F636B2D53697A65204B6579202D2048617368204B6579204669727374"
	hmac "${key}" "${data}"

	key="AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
	read data < <( echo -n "This is a test using a larger than block-size key and a larger than block-size data. The key needs to be hashed before being used by the HMAC algorithm." | str2bytes | bytes2hexstr )
#	data="5468697320697320612074657374207573696E672061206C6172676572207468616E20626C6F636B2D73697A65206B657920616E642061206C6172676572207468616E20626C6F636B2D73697A6520646174612E20546865206B6579206E6565647320746F20626520686173686564206265666F7265206265696E6720757365642062792074686520484D414320616C676F726974686D2E"
	hmac "${key}" "${data}"
}

testrfc6979(){

	local -u key data msg
	local -au kval
	set_hashfun_const "sha256"

	key="1"
	read data < <( echo -n "Satoshi Nakamoto" | str2bytes | bytes2hexstr )
#	data="5361746F736869204E616B616D6F746F"	
	read msg < <( sha256 "${data}" )
	readarray -t kval < <( sigk "${key}" "${data}" )
	bc <<<"sign(${kval[1]},${kval[0]},${msg},${key},nn)"

	key="1"
	read data < <( echo -n "All those moments will be lost in time, like tears in rain. Time to die..." | str2bytes | bytes2hexstr )
#	data="416C6C2074686F7365206D6F6D656E74732077696C6C206265206C6F737420696E2074696D652C206C696B6520746561727320696E207261696E2E2054696D6520746F206469652E2E2E"
	read msg < <( sha256 "${data}" )
	readarray -t kval < <( sigk "${key}" "${data}" )
	bc <<<"sign(${kval[1]},${kval[0]},${msg},${key},nn)"

	key="FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364140"
	read data < <( echo -n "Satoshi Nakamoto" | str2bytes | bytes2hexstr )
#       data="5361746F736869204E616B616D6F746F"
	read msg < <( sha256 "${data}" )
	readarray -t kval < <( sigk "${key}" "${data}" )
	bc <<<"sign(${kval[1]},${kval[0]},${msg},${key},nn)"

	key="F8B8AF8CE3C7CCA5E300D33939540C10D45CE001B8F252BFBC57BA0342904181"
	read data < <( echo -n "Alan Turing" | str2bytes | bytes2hexstr )
#	data="416C616E20547572696E67"
	read msg < <( sha256 "${data}" )
	readarray -t kval < <( sigk "${key}" "${data}" )
	bc <<<"sign(${kval[1]},${kval[0]},${msg},${key},nn)"
}

testhmac_sha256() {

	local -a ret
	set_hashfun_const "sha256"
	readarray -t ret < <( testhmac )
	
	printf "%s\n" ${ret[@]}
	[[ "${ret[0]}" == "B0344C61D8DB38535CA8AFCEAF0BF12B881DC200C9833DA726E9376C2E32CFF7" ]] && \
	[[ "${ret[1]}" == "5BDCC146BF60754E6A042426089575C75A003F089D2739839DEC58B964EC3843" ]] && \
	[[ "${ret[2]}" == "773EA91E36800E46854DB8EBD09181A72959098B3EF8C122D9635514CED565FE" ]] && \
	[[ "${ret[3]}" == "82558A389A443C0EA4CC819899F2083A85F0FAA3E578F8077A2E3FF46729665B" ]] && \
	[[ "${ret[4]:0:32}" == "A3B6167473100EE06E0C796C2955552B" ]] && \
	[[ "${ret[5]}" == "60E431591EE0B67F0D8A26AACBF5B77F8E0BC6213728C5140546040F0EE37F54" ]] && \
	[[ "${ret[6]}" == "9B09FFA71B942FCB27635FBCD5B0E944BFDC63644F0713938A7F51535C3A35E2" ]] && \
	echo "testhmac_sha256() passed"
}

testhmac_sha224() {

	local -a ret
	set_hashfun_const "sha224"
	readarray -t ret < <( testhmac )

	printf "%s\n" ${ret[@]}
	[[ "${ret[0]}" == "896FB1128ABBDF196832107CD49DF33F47B4B1169912BA4F53684B22" ]] && \
	[[ "${ret[1]}" == "A30E01098BC6DBBF45690F3A7E9E6D0F8BBEA2A39E6148008FD05E44" ]] && \
	[[ "${ret[2]}" == "7FB3CB3588C6C1F6FFA9694D7D6AD2649365B0C1F65D69D1EC8333EA" ]] && \
	[[ "${ret[3]}" == "6C11506874013CAC6A2ABC1BB382627CEC6A90D86EFC012DE7AFEC5A" ]] && \
	[[ "${ret[4]:0:32}" == "0E2AEA68A90C8D37C988BCDB9FCA6FA8" ]] && \
	[[ "${ret[5]}" == "95E9A0DB962095ADAEBE9B2D6F0DBCE2D499F112F2D2B7273FA6870E" ]] && \
	[[ "${ret[6]}" == "3A854166AC5D9F023F54D517D0B39DBD946770DB9C2B95C9F6F565D1" ]] && \
	echo "testhmac_sha224() passed"
}

testhmac_sha384() {

	local -a ret
	set_hashfun_const "sha384"
	readarray -t ret < <( testhmac )

	printf "%s\n" ${ret[@]}
	[[ "${ret[0]}" == "AFD03944D84895626B0825F4AB46907F15F9DADBE4101EC682AA034C7CEBC59CFAEA9EA9076EDE7F4AF152E8B2FA9CB6" ]] && \
	[[ "${ret[1]}" == "AF45D2E376484031617F78D2B58A6B1B9C7EF464F5A01B47E42EC3736322445E8E2240CA5E69E2C78B3239ECFAB21649" ]] && \
	[[ "${ret[2]}" == "88062608D3E6AD8A0AA2ACE014C8A86F0AA635D947AC9FEBE83EF4E55966144B2A5AB39DC13814B94E3AB6E101A34F27" ]] && \
	[[ "${ret[3]}" == "3E8A69B7783C25851933AB6290AF6CA77A9981480850009CC5577C6E1F573B4E6801DD23C4A7D679CCF8A386C674CFFB" ]] && \
	[[ "${ret[4]:0:32}" == "3ABF34C3503B2A23A46EFC619BAEF897" ]] && \
	[[ "${ret[5]}" == "4ECE084485813E9088D2C63A041BC5B44F9EF1012A2B588F3CD11F05033AC4C60C2EF6AB4030FE8296248DF163F44952" ]] && \
	[[ "${ret[6]}" == "6617178E941F020D351E2F254E8FD32C602420FEB0B8FB9ADCCEBB82461E99C5A678CC31E799176D3860E6110C46523E" ]] && \
	echo "testhmac_sha384() passed"
}

testhmac_sha512() {

	local -a ret
	set_hashfun_const "sha512"
	readarray -t ret < <( testhmac )

	printf "%s\n" ${ret[@]}
	[[ "${ret[0]}" == "87AA7CDEA5EF619D4FF0B4241A1D6CB02379F4E2CE4EC2787AD0B30545E17CDEDAA833B7D6B8A702038B274EAEA3F4E4BE9D914EEB61F1702E696C203A126854" ]] && \
	[[ "${ret[1]}" == "164B7A7BFCF819E2E395FBE73B56E0A387BD64222E831FD610270CD7EA2505549758BF75C05A994A6D034F65F8F0E6FDCAEAB1A34D4A6B4B636E070A38BCE737" ]] && \
	[[ "${ret[2]}" == "FA73B0089D56A284EFB0F0756C890BE9B1B5DBDD8EE81A3655F83E33B2279D39BF3E848279A722C806B485A47E67C807B946A337BEE8942674278859E13292FB" ]] && \
	[[ "${ret[3]}" == "B0BA465637458C6990E5A8C5F61D4AF7E576D97FF94B872DE76F8050361EE3DBA91CA5C11AA25EB4D679275CC5788063A5F19741120C4F2DE2ADEBEB10A298DD" ]] && \
	[[ "${ret[4]:0:32}" == "415FAD6271580A531D4179BC891D87A6" ]] && \
	[[ "${ret[5]}" == "80B24263C7C1A3EBB71493C1DD7BE8B49B46D1F41B4AEEC1121B013783F8F3526B56D037E05F2598BD0FD2215D6A1E5295E64F73F63F0AEC8B915A985D786598" ]] && \
	[[ "${ret[6]}" == "E37B6A775DC87DBAA4DFA9F96E5E3FFDDEBD71F8867289865DF5A32D20CDC944B6022CAC3C4982B10D5EEB55C3E4DE15134676FB6DE0446065C97440FA8C6A58" ]] && \
	echo "testhmac_sha512() passed"
}
