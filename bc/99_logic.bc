#!/bin/bc

define void setnumsize(){

    word_ = 1;
    byte_ = 2 * word_;
    int_ = 4 * byte_;
    unit256_ = 8 * int_;
}    

define wordlen(n){

    auto num, ans, i;
    ans = -1;
    i = -1;

    if ( n == 0 ){

        return 1;
    }

    num = n;

    if ( n < 0 ){

        num = (num * -1);
    }

    while (ans <= 0){

        i=i+1;
        ans=( (10^i)-(num) );
    }

    return i;
}

define void num2bitarr(n, *ret[]){

    auto ibit;

    ibit = -1;

    while ( n > 0 ){

        ibit = ibit+1;
        ret[ibit+1] = ( n % 2 );
        n /= 2;
    }

    ret[0] = ibit;
}

define bitlen(n){

    return wordlen(n)*4;
}

define bwand(a, b){

    auto arra[], arrb[], end, res;

    num2bitarr(a, arra[]);
    num2bitarr(b, arrb[]);

#    print "arra[0] = ", arra[0], "\n";
#    print "arrb[0] = ", arrb[0], "\n";
    if ( arra[0] > arrb[0] ){

        end = arrb[0] + 1;
    } else {

        end = arra[0] + 1;
    }

    for ( i=1; i<=end; i++ ){

#        print "res : ", res, "\n"
#        print "arra[i] : ", arra[i], "\n";
#        print "arrb[i] : ", arrb[i], "\n";
        res += 2^(i-1) * ( arra[i] && arrb[i] );
    }

    return res;
}

define bwor(a, b){

    auto arra[], arrb[], end, res;

    num2bitarr(a, arra[]);
    num2bitarr(b, arrb[]);

#    print "arra[0] = ", arra[0], "\n";
#    print "arrb[0] = ", arrb[0], "\n";
    if ( arra[0] < arrb[0] ){

        end = arrb[0] + 1;
    } else {

        end = arra[0] + 1;
    }

    for ( i=1; i<=end; i++ ){

#        print "res : ", res, "\n"
#        print "arra[i] : ", arra[i], "\n";
#        print "arrb[i] : ", arrb[i], "\n";
        res += 2^(i-1) * ( arra[i] || arrb[i] );
    }

    return res;
}

define bwxor(a, b){

    auto arra[], arrb[], end, res;

    num2bitarr(a, arra[]);
    num2bitarr(b, arrb[]);

    print "arra[0] = ", arra[0], "\n";
    print "arrb[0] = ", arrb[0], "\n";
    if ( arra[0] < arrb[0] ){

        end = arrb[0] + 1;
    } else {

        end = arra[0] + 1;
    }

    for ( i=1; i<=end; i++ ){

        print "res : ", res, "\n"
        print "arra[i] : ", arra[i], "\n";
        print "arrb[i] : ", arrb[i], "\n";
        res += 2^(i-1) * (( arra[i] || arrb[i] ) && !( arra[i] && arrb[i] ));
    }

    return res;
}


define arit_lshift(t ,n, e){

    auto arrout[], res;

    res = n * (2^e);
    num2bitarr(res,arrout[]);

    res = 0;
    for ( i=1; i<=t; i++ ){

        res += 2^(i-1) * arrout[i];
    }

    return res;
}


define log_rshift(t ,n, e){

    auto arrout[], res;

    res = n / (2^e);
    num2bitarr(res,arrout[]);

    res = 0;
    for ( i=1; i<=t; i++ ){

        res += 2^(i-1) * arrout[i];
    }

    return res;
}
